<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PS人物精修</title>
      <link href="posts/29970/"/>
      <url>posts/29970/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><label>   <h3> 导入人物图片</h3>  <h3>  在左边工具栏选择仿制图章先将图片水印去掉</h3>   <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS1.png">   <h3> 按住ALT并滑动滚轮放大图片，然后按ALT键取样点</h3>   <h3> 然后用鼠标左边将水印擦掉</h3>   <h3>在左边工具栏选择污点修复工具里面的修复换工具修复人物的污点</h3>    <h3>按ALT键取样点</h3>    <h3>然后按住ALT键取样点之后用鼠标左键修复有水印的地方</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/1.gif"><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1>  <label>    <h3> 在右边控制面板</h3>    <h3> 选择通道面板</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS2.png">    <h3> 分别点击红绿蓝查看明暗对比最强烈的通道</h3>    <h3> 右键复制图层</h3>    <h3> 点击复制图层</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS3.png">  </label><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h1><label>    <h3>在菜单栏选择滤镜-其他-高反差保留-半径里填入8像素或者10像素</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS4.png">    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS5.png">     <h3>在菜单栏选择图像-计算</h3>     <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS6.png">    <h3>最下面的混合选择强光,点击确定</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS7.png">    <h3>再重复计算两次一共3次计算</h3>    <h3>选择Alpha3</h3>    <h3>先按照CTRL然后同时按鼠标左键选择区域或者点击下方的“将通道作为选区载入”</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS8.png">   <h3> 选好选区之后</h3>   <h3> 在菜单栏-选择,点击反选或者同时按SHIFT+CTRL+I</h3>   <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS9.png"></label><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><label>     <h3>单击通道面板下方的RGB图层</h3>     <h3>然后点击通道左边的图层面板</h3>     <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS10.png">     <h3>点击图层面板上方的调成面板里面的曲线</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS11.png">     <h3>根据实际情况调整曲线</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS12.png"></label><h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><label>    <h3>复制一层人物图层并置顶或者用鼠标按住图层拖到最上方</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS13.png">    <h3>在菜单栏-滤镜-模糊-表面模糊</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS14.png">   <h3> 半径选择15阈值选择20点击确定</h3>   <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS15.png">    <h3>并将图层的不透明度调低</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS16.png">    <h3>再次复制一层人物图层并置顶或者用鼠标按住图层拖到最上方</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS17.png">    <h3>在菜单栏-滤镜-其他-高反差保留</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS18.png">    <h3>半径选择1或者0.8点击确定</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS19.png">    <h3>混合模式选择线性光</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS20.png"></label><h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h1><label>    <h3>在上方的调整面板选择可选颜色</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS21.png">    <h3>根据实际情况调整红色-黄色-中性色</h3>    <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS22.png"></label><h1 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h1><label>     <h3>选择左边工具箱的套索工具或者钢笔工具</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS23.png">     <h3>选择要提亮颜色的位置,并选择羽化</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS24.png">     <h3>点击新建图层</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS25.png">     <h3>填充对应的颜色</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS26.png">      <h3> 选择正片叠底</h3>        <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS27.png">     <h3>双击选择的图层，打开图层样式</h3>     <h3>选择混合选择：自定</h3>     <h3>选择最下方的混合颜色带里面的下个图层</h3>     <h3>在白色区域鼠标点击尖角并按住ALT</h3>     <h3>拖动鼠标看实际效果</h3>      <img src= "/img/loading.gif" data-lazy-src="/img/PS1/PS28.png"><label><h1 id="如果还有其他区域重复第七步步骤"><a href="#如果还有其他区域重复第七步步骤" class="headerlink" title="如果还有其他区域重复第七步步骤"></a>如果还有其他区域重复第七步步骤</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32创建文件目录</title>
      <link href="posts/1456/"/>
      <url>posts/1456/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>新建一个文件夹<br>lesson_fwlib_template<br>里面新建以下文件</p><p>   Projecr：工程</p><p>   Libraries：固件库</p><p>   User：用户编写</p><p>   Doc:说明文件</p><p>第一步<br>   打开keli5<br>   点击project<br>   new vision project<br>   选择刚刚新建的文件位置<br>   选择project<br>   在下面文件名输入“自定义文件名”<br>   确定之后选择STMicroelectronics前面的＋号<br>   根据自己的型号选择芯片型号，比如我的是stm32f103rct6<br>   点击STM32F1 Series前面的+号<br>   点击STM32F103前面的+号<br>   选择STM32F103RC<br>   点击ok<br>   弹出的框点击关闭</p><p>第二步<br> 在左侧Project拦里面的target 1文件夹下<br> 双击Source Group1更改名称为STARTUP<br> 右键Target1 点击Add Group更改名称为CMSIS用于存放<br>  右键Target1 点击Add Group更改名称为FWLIB用于存放固件库<br>  右键Target1 点击Add Group更改名称为USER用于存放用户文件<br>  右键Target1 点击Add Group更改名称为DOC用于存放文件说明</p><p>第三步<br>  打开用于存放的文件的文件夹<br>  打开Libraries文件夹<br>  再打开官方文件STM32F10x_StdPeriph_Lib_V3.5.0\Libraries<br>  将CMSIS、STM32F10x_StdPeriph_Driver<br>  一起复制到自己存放Libraries的文件<br>  打开\Libraries\CMSIS删除多余的文件<br>  删除License.doc<br>  删除CMSIS_changes.htm<br>  删除CMSIS debug support.htm<br>  删除Documentation<br>  CMSIS文件里只剩下CM3<br>  打开CM3\DeviceSupport\ST\STM32F10x<br>  将里面所有的文件剪切到CMSIS<br>  进入CM3文件夹删除DeviceSupport<br>  打开CoreSupport文件夹<br>  将里面的所有文件剪切到CMSIS<br>  删除CM3<br>  最后CMSIS文件夹只剩下<br>  srartup文件夹<br>  core_cm3.c<br>  core_cm3.h<br>  stm32f10x.h<br>  system_stm32f10x.c<br>  system_stm32f10x.h<br>  这几个文件夹<br>  打开srartup文件夹<br>  删除gcc_ride7/iar/TrueSTUDIO<br>  打开arm文件夹将里面的文件剪切到之前的目录startup<br>  删除arm</p><p>第四步<br>   返回到文件目录打开User<br>   右键新建文本文档<br>   改名为main.c<br>   再打开官方文件STM32F10x_StdPeriph_Lib_V3.5.0\Project<br>   复制<br>   stm32f10x_conf.h<br>   stm32f10x_it.c<br>   stm32f10x_it.h<br>   到User目录里面</p><p>第五步<br>   回到keli5双击Project里面的STARTUP将启动文件加进去<br>   点击文件类型选All files（*.*）<br>   返回到上级目录<br>   打开Libraries/CMSIS/startup<br>   根据芯片型号选择文件，我的是RCT6-256k<br>   我选择startup_stm32f10x_hd.s<br>   点击add添加然后点击Close关闭</p><p>   回到keli5双击Project里面的CMSIS<br>   返回到上级目录CMSIS<br>   添加core_cm3.c、system_stm32f10x.c<br>   分别添加进去然后点击Close关闭</p><p>   回到keli5双击Project里面的FWLIB<br>   返回到上级目录Libraries<br>   打开STM32F10x_StdPeriph_Driver/src<br>   按Ctrl+A全选点击add添加进来<br>   然后点击Close关闭</p><p>   回到keli5双击Project里面的USER<br>   返回到上级根目录<br>   打开User<br>   添加main.c、stm32f10x_it.c<br>   分别添加进去然后点击Close关闭</p><p>   回到keli5双击Project里面的DOC<br>   返回到上级根目录<br>   打开Doc<br>   添加readme.txt添加进去然后点击Close关闭</p><p>第六步<br>   打开魔术棒选项卡Options for Target<br>   选择C/C++<br>   选择倒数第三个文本框include paths<br>   点击后面的。。。按钮<br>   点击（x）左边的新建按钮<br>   点击刚出现的文本后面。。。按钮<br>   打开Libraries\CMSIS点击选择文件夹之后按回车确定<br>   点击（x）左边的新建按钮<br>   点击刚出现的文本后面。。。按钮<br>   打开Libraries\STM32F10x_StdPeriph_Driver\inc点击选择文件夹之后按回车确定<br>   点击（x）左边的新建按钮<br>   点击刚出现的文本后面。。。按钮<br>   打开User点击选择文件夹之后按回车确定<br>   点击ok再次点击ok返回到界面</p><p>第七步<br>   点击user的加号打开mian.c<br>   对#include “stm32f10x.h”右键open document”stm32f10x.h”<br>   将文件翻到倒最底下再往上一点复制USE_STDPERIPH_DRIVER<br>   打开魔术棒选项卡Options for Target<br>   选择C/C++<br>   在第一个define文本框里面粘贴<br>   点击ok<br>   将stm32f10x.h文件翻到倒最顶部往下滑一些<br>   找到!defined<br>   复制自己对应型号容量的文件名称<br>   打开魔术棒选项卡Options for Target<br>   选择C/C++<br>   在第一个define文本框内<br>   在后面添加英文状态下逗号（,）粘贴进去</p><p>第八步<br>   打开魔术棒选项卡Options for Target<br>   选择Target右边Code Generation<br>   勾上Use MicroLIB<br>   选择Output<br>   下边勾上Create HEX File和Browes information</p><p>第九步<br>   进入文件根目录新建一个文本文档<br>   输入<br>   del *.bak /s<br>   del *.ddk /s<br>   del *.edk /s<br>   del *.lst /s<br>   del *.lnp /s<br>   del *.mpf /s<br>   del *.mpj /s<br>   del *.obj /s<br>   del *.omf /s<br>   del *.plg /s<br>   del *.rpt /s<br>   del *.tmp /s<br>   del *.__i /s<br>   del *.crf /s<br>   del *.o /s<br>   del *.d /s<br>   del *.axf /s<br>   del *.tra /s<br>   del *.dep /s<br>   del *.JLinkLog.txt /s<br>   del *.iex /s<br>   del *.htm /s<br>   del *.sct /s<br>   del *.map /s<br>   exit<br>   保存之后将文本名字改为keli.bat</p><p>第十步</p><p>   将ST-LINK2插入电脑<br>   用杜邦线链接单片机<br>   ST-LINK的CLK对单片机的CLK，DIO对着单片机的DIO<br>   如果单片机单独供电则只将ST-LINK2的GND接上单片机的GND<br>   如果不是单独供电则将ST-LINK2的3.3V和GND接上单片机的3.3V和GND<br>   回到keli5<br>   打开魔术棒选项卡Options for Target<br>   选择Debug右边区域的Use选择ST-Link Debugger<br>   点击右边Settings<br>   将下方Target Com的Port选择为SW<br>   右方区域SW DeVice可以识别到ST-LINK2下载器<br>   如果右方区域没有显示无则是ST-LINK2有问题<br>   选择Flash Dowload选择下方Dowload Function<br>   勾上Reset and Run<br>   点击确定退出再次点击ok表示完成</p><p>错误解决</p><p> 1、coer_cm3.c文件错误，4次警告以上，跟着教程还是一样<br>   （报错的原因是Coer_cm3.c和Coer_cm3.h文件太老导致的，这个是2009版本，ST已经停止维护了）<br> 解决方法：1、更换解决方案版本，将6变成5<br>          打开魔术棒工具<br>          点击Target<br>          选择右边Code Generation<br>          ARM Compiler：选择Use default compiler version 5这个版本</p><pre><code>     2、下载最新的STM32cube_FW软件包        删除之前的旧文件        打开压缩包将cmsis_armcc_V6.h、core_cm3.h、coer_cmFunc.h、coer_cmlnstr.h这几个文件覆盖到CMSIS里面。停用core_cm3.c改用CMSIS标准接口。        这是ARM官方标准接口，坏处是CMSIS标准接口屏蔽了实现细节，但这是趋势。</code></pre>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32开发</title>
      <link href="posts/1455/"/>
      <url>posts/1455/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="STM32学习过程"><a href="#STM32学习过程" class="headerlink" title="STM32学习过程"></a>STM32学习过程</h1><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><p> <code>修改STM32寄存器单个位值</code></p><p>GPIOB_ODR的第10位置一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GPIOB_ODR的第10位置一</span></span><br><span class="line">GPIOB_ODR | = (<span class="number">1</span>&lt;&lt;<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>（  |  ）或符号任何数用于对比时等于任何数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="comment">//基础数值</span></span><br><span class="line">| <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span><span class="comment">//用（或）改变单位数值</span></span><br><span class="line">= <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span><span class="comment">//等于的数值</span></span><br></pre></td></tr></table></figure><p>GPIOB_ODR的第10位<code>清零</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GPIOB_ODR的第10位置一</span></span><br><span class="line">GPIOB_ODR &amp; = ~(<span class="number">1</span>&lt;&lt;<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>(  |  )与符号<br>( &amp; ) 取反符号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="comment">//基础数值</span></span><br><span class="line">~ <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="comment">//取反</span></span><br><span class="line">&amp; <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span><span class="comment">//用（与）改变单位数值</span></span><br><span class="line">= <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span><span class="comment">//等于的数值</span></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">uint32_t</span>;<span class="comment">//定义一个32位的地址</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">uint16_t</span>;<span class="comment">//定义一个16位的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>//定义类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> CRL;  <span class="comment">//定义一个32位的地址名字为CRL </span></span><br><span class="line"><span class="keyword">uint32_t</span> CRH;  <span class="comment">//定义一个32位的地址名字为CHR</span></span><br><span class="line"><span class="keyword">uint32_t</span> IDR;  <span class="comment">//定义一个32位的地址名字为IDR</span></span><br><span class="line"><span class="keyword">uint32_t</span> ODR;  <span class="comment">//定义一个32位的地址名字为ODR</span></span><br><span class="line"><span class="keyword">uint32_t</span> BSRR; <span class="comment">//定义一个32位的地址名字为BSRR</span></span><br><span class="line"><span class="keyword">uint32_t</span> BRR;  <span class="comment">//定义一个32位的地址名字为BRR </span></span><br><span class="line"><span class="keyword">uint32_t</span> LCKR; <span class="comment">//定义一个32位的地址名字为LCKR</span></span><br><span class="line">&#125;GPIO_TypeDef;<span class="comment">//定义的名字</span></span><br></pre></td></tr></table></figure><p>结构类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPIOB  ((GPIO_TypeDef*)GPIOB_BASE)<span class="comment">//宏定义GPIOB指向内存</span></span></span><br></pre></td></tr></table></figure><h3 id="三级目录"><a href="#三级目录" class="headerlink" title="三级目录"></a>三级目录</h3>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32点亮led</title>
      <link href="posts/1457/"/>
      <url>posts/1457/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>第一步<br>   复制一份文件STM32模本文件<br>   打开文件目录<br>   进入User文件新建一个bsp_led.c和bsp_led.h<br>   返回到根目录打开projecr进入之后打开工程<br>   双击USER添加刚刚的bsp_led.c文件进来</p><p>第二步<br>   双击bsp_led.c在里面输入#include “bsp_led.h”<br>   打开魔术棒选项卡Options for Target<br>   点击C/C++选择下面include Paths后面的三个点<br>   将bsp_led.h的文件目录添加进去</p><p>第二步<br>   右键#include “bsp_led.h”选择open document”bsp_led.h”<br>   在里面添加</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好世界</title>
      <link href="posts/45069/"/>
      <url>posts/45069/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>欢迎来到我的博客，这是 <a href="https://hexo.io/">Hexo</a>主题</p><h2 id="祝贺我离开这里"><a href="#祝贺我离开这里" class="headerlink" title="祝贺我离开这里"></a>祝贺我离开这里</h2><p>这是我的第一个博客，在安装的过程中走了很多弯路</p><p>在得知我的小伙伴制作了一个博客之后，我的心也蠢蠢欲动。</p><p>在询问了我的小伙伴制作方法之后我就开始了我的博客制作之路</p><h5>先是安装了Git、Node.js、Hexo这些软件</h5><h5>更换主题</h5><h5>然后注册Github账号添加</h5><h5>使用ssh制作秘钥</h5><h5>然后就是域名解析</h5><h5>就简单的讲述一下吧</h5><h5>目前还有很多问题没有解决</h5><h5>比如加载动画不明不买的没了、或者主题美化不知道为什么没有用，看不懂代码如何引用。抄代码时出现错误</h5><img src= "/img/loading.gif" data-lazy-src="/img/pic.jpg"><h4 id="最后感谢一下这几位的博客主题美化的链接"><a href="#最后感谢一下这几位的博客主题美化的链接" class="headerlink" title="最后感谢一下这几位的博客主题美化的链接"></a>最后感谢一下这几位的博客主题美化的链接</h4><p><a href="https://www.antmoe.com/posts/a811d614/index.html">小康博客</a></p><p><a href="https://www.linuxwf.com/2020/04/08/exo-theme-butterfly-%E5%AE%89%E8%A3%9D%E6%96%87%E6%AA%94%EF%BC%88%E4%B8%89%EF%BC%89%E4%B8%BB%E9%A1%8C%E9%85%8D%E7%BD%AE/#%E7%B6%B2%E7%AB%99%E5%89%AF%E6%A8%99%E9%A1%8C">WF’s blog</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
